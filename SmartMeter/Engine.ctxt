#BlueJ class context
comment0.params=
comment0.target=void\ startupEngine()
comment0.text=\n\ startupEngine\n\ The\ equivalent\ of\ a\ contructor,\ but\ for\ the\ static\ elements\ of\ the\ engine.\ \n\ Must\ be\ called\ first\ at\ runtime.\ \n
comment1.params=
comment1.target=void\ command()
comment1.text=\n\ Command\n\ The\ command\ loop,\ wait\ for\ commands\ and\ then\ execute\ them\n
comment10.params=
comment10.target=void\ getCurrentPrice()
comment10.text=\n\ getCurrentPrice\n\ Updates\ the\ current\ operational\ price\ and\ set\ it.\ \n\ \n\ Given\ the\ demonstrative\ nature\ of\ the\ class,\ this\ is\ only\ \n\ creating\ the\ information\ our\ of\ thin\ air.\ In\ reality,\ \n\ it\ ought\ to\ get\ it\ through\ a\ socket\ or\ some\ kind\ of\ \n\ transport\ medium\ from\ the\ provider.\ \n
comment11.params=
comment11.target=void\ updateForecast()
comment11.text=\n\ updateForecast\n\ updates\ the\ forecast\ data\ from\ appliances.\n
comment12.params=
comment12.target=void\ update()
comment12.text=\n\ update\n\ Downloads\ the\ latest\ price\ information\ and\ sets\ it\ accordingly\n\ Note\ that\ this\ command\ may\ be\ invoked\ by\ any\ party,\ including\ the\ \n\ customer.\ It\ does\ require\ a\ valid\ signature,\ but\ does\ \n\ not\ require\ vendor\ appropval\n
comment13.params=
comment13.target=void\ packup()
comment13.text=\n\ packup\n\ Takes\ the\ current\ usage\ block\ and\ packs\ it\ up\ and\ places\ it\ in\ the\ log\n
comment14.params=p
comment14.target=void\ setCurrentPrice(Server.Price)
comment14.text=\n\ setCurrentPrice\n\ Sets\ the\ current\ operation\ price.\ \n
comment15.params=
comment15.target=Server.Command\ listener()
comment15.text=\n\ listener\n\ A\ simulation\ of\ something\ that\ listens\ at\ a\ socket,\ and\ when\ a\ command\ is\ \n\ received,\ passes\ it\ on\ to\ the\ command\ method\n
comment16.params=o
comment16.target=void\ sender(java.lang.Object)
comment16.text=\n\ sender\n\ A\ simulated\ socket.\ Commands\ are\ sent\ through\ this\ to\ be\ theoretically\ dispatched\n\ securely\ to\ the\ server.\ Signed\ on\ the\ fly\ and\ dispatched\ with\ signature.\ \n
comment17.params=o
comment17.target=java.lang.String\ encryptSign(java.lang.Object)
comment17.text=\n\ encryptSign\n\ encrypts\ and\ signs\ the\ given\ data.\ In\ this\ case,\ the\ signature\ and\ encryption\n\ is\ given\ simulated\ only.\ \n
comment18.params=c
comment18.target=boolean\ timeCheck(Server.Command)
comment18.text=\n\ timeCheck\n\ a\ method\ that\ checks\ the\ timestamp\ on\ a\ signature\ and\ will\ return\n\ true\ if\ the\ time\ is\ within\ a\ VALIDTIMEFRAME.\ \n\ \n\ As\ of\ version\ 1,\ this\ is\ not\ implemented\ but\ merely\ serves\ as\ an\ example\ of\ \n\ this\ kind\ of\ behaviour.\ At\ the\ present,\ this\ will\ return\ false\ as\ it\ \n\ receives\ an\ invalid\ signature.\ \n
comment19.params=
comment19.target=Server.ServerSocket\ getServer()
comment2.params=in
comment2.target=void\ addUsage(double)
comment2.text=\n\ addUsage\n\ Adds\ the\ specified\ amount\ of\ power\ to\ the\ present\ block\ of\ usage.\ \n
comment3.params=in
comment3.target=void\ addProduction(double)
comment4.params=
comment4.target=void\ forecast()
comment4.text=\n\ forecast\n\ Sends\ the\ forecast\ data\ for\ applications\ for\ the\ given\ period.\ \n
comment5.params=
comment5.target=void\ usage()
comment5.text=\n\ usage\n\ Sends\ the\ usage\ data.\ \n
comment6.params=
comment6.target=void\ clear()
comment6.text=\n\ clear\ \n\ Clears\ the\ log\ files,\ implicitly\ it\ is\ understood\ that\ coomand\ will\ be\ invoked\ \n\ once\ usage\ data\ has\ been\ sent\ and\ confirmed.\ \n\ Note\ this\ specifies\ a\ vector\ as\ the\ usage\ type.\ However,\ this\ is\ not\ necessary.\ \n
comment7.params=l
comment7.target=void\ setUsage(java.util.AbstractList)
comment7.text=\n\ setUsage\n\ Sets\ the\ usage\ data.\ \n
comment8.params=l
comment8.target=void\ setProduction(java.util.AbstractList)
comment8.text=\n\ setProduction\n\ Sets\ the\ production\ list,\ ie,\ the\ list\ of\ production\ blocks\ of\ power.\ \n
comment9.params=
comment9.target=double\ getPrice()
comment9.text=\n\ getPrice\n\ Provides\ the\ present\ price\ in\ decimal\ form.\ \n\ Will\ throw\ -1\ in\ the\ event\ of\ a\ problem.\ \n
numComments=20
